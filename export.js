import { formatDate, monthNameAr } from './utils.js';
function aoaToSheet(aoa){const ws=XLSX.utils.aoa_to_sheet(aoa);ws['!cols']=[{wch:40},{wch:14},{wch:16}];return ws}
function saveWorkbook(wb,file){XLSX.writeFile(wb,file,{compression:true})}
export const exportExcel={bankSide(bankName,sideLabel,rows,month,year){const header=[[`البنك: ${bankName}`],[`الجانب: ${sideLabel}`]],table=[["البيان","التاريخ","المبلغ"]];for(const r of rows)table.push([r.description,formatDate(r.date),r.amount]);const wb=XLSX.utils.book_new();const ws=aoaToSheet([...header,[],...table]);ws['!cols']=[{wch:40},{wch:12},{wch:14}];XLSX.utils.book_append_sheet(wb,ws,sideLabel);const file=`${bankName} - ${String(month).padStart(2,'0')} - ${monthNameAr(month-1)} - ${year}.xlsx`;saveWorkbook(wb,file)},bankMonth(bank,month,year,debitRows,creditRows,totals){const wb=XLSX.utils.book_new();const summary=[["البنك",bank.name],["الشهر",`${String(month).padStart(2,'0')} - ${monthNameAr(month-1)} - ${year}`],["إجمالي مدين",totals.totalDebit],["إجمالي دائن",totals.totalCredit],["الرصيد",totals.balance]];XLSX.utils.book_append_sheet(wb,XLSX.utils.aoa_to_sheet(summary),'ملخص');const debit=aoaToSheet([["البيان","التاريخ","المبلغ"],...debitRows.map(r=>[r.description,formatDate(r.date),r.amount])]);debit['!cols']=[{wch:40},{wch:12},{wch:14}];const credit=aoaToSheet([["البيان","التاريخ","المبلغ"],...creditRows.map(r=>[r.description,formatDate(r.date),r.amount])]);credit['!cols']=[{wch:40},{wch:12},{wch:14}];XLSX.utils.book_append_sheet(wb,debit,'مدين');XLSX.utils.book_append_sheet(wb,credit,'دائن');const file=`${bank.name} - ${String(month).padStart(2,'0')} - ${monthNameAr(month-1)} - ${year}.xlsx`;saveWorkbook(wb,file)},fiscalYear(summary){const wb=XLSX.utils.book_new();const header=[[`سنة مالية ${summary.label}`]],table=[["البنك","إجمالي مدين","إجمالي دائن","الرصيد","عدد القيود"]];for(const row of summary.perBank)table.push([row.bankName,row.totalDebit,row.totalCredit,row.balance,row.count]);const ws=aoaToSheet([...header,[],...table]);ws['!cols']=[{wch:26},{wch:16},{wch:16},{wch:16},{wch:12}];XLSX.utils.book_append_sheet(wb,ws,'الملخص');const file=`أرصدة البنوك - سنة مالية ${summary.label}.xlsx`;saveWorkbook(wb,file)}};
export const backup={async exportJSON(db){const database=await db.open();const dump=name=>new Promise((res,rej)=>{const r=database.transaction([name]).objectStore(name).getAll();r.onsuccess=()=>res(r.result||[]);r.onerror=()=>rej(r.error)});const [banks,entries,settings]=await Promise.all([dump('banks'),dump('entries'),dump('settings')]);const payload={version:1,exportedAt:new Date().toISOString(),banks,entries,settings};const blob=new Blob([JSON.stringify(payload,null,2)],{type:'application/json'});const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download=`bank-ledger-backup-${new Date().toISOString().slice(0,10)}.json`;document.body.appendChild(a);a.click();document.body.removeChild(a);URL.revokeObjectURL(url)},async importJSON(db,file){const text=await file.text();let payload;try{payload=JSON.parse(text)}catch{throw new Error('ملف JSON غير صالح')}if(!payload||!Array.isArray(payload.banks)||!Array.isArray(payload.entries)||!Array.isArray(payload.settings)) throw new Error('هيكل النسخة الاحتياطية غير صحيح');const database=await db.open();await new Promise((res,rej)=>{const t=database.transaction(['banks','entries','settings'],'readwrite');t.objectStore('banks').clear();t.objectStore('entries').clear();t.objectStore('settings').clear();t.oncomplete=res;t.onerror=()=>rej(t.error)});await new Promise((res,rej)=>{const t=database.transaction(['banks','entries','settings'],'readwrite');payload.banks.forEach(b=>t.objectStore('banks').add(b));payload.entries.forEach(e=>t.objectStore('entries').add(e));payload.settings.forEach(s=>t.objectStore('settings').put(s));t.oncomplete=res;t.onerror=()=>rej(t.error)})}};export default {exportExcel,backup};

